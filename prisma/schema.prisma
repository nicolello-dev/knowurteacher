generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGREDB_URL")
}

model Teacher {
  id         String   @id @default(uuid())
  added_date DateTime @default(now()) @db.Timestamptz(3)
  name       String
  school     String
  photoURL   String?
  Reviews    Review[]

  @@unique([name, school])
  @@index([name, school])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  join_date DateTime @default(now()) @db.Timestamptz(3)
  username  String
  school    String?
  photoURL  String?
  Reviews   Review[]
  votes     Vote[]

  @@index([email, username])
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  authorID  String
  teacherID String
  text      String
  reports   Int      @default(0)
  points    Int      @default(0)
  author    User     @relation(fields: [authorID], references: [id])
  teacher   Teacher  @relation(fields: [teacherID], references: [id])
  votes     Vote[]

  @@unique([authorID, teacherID])
}

enum voteType {
  upvote
  downvote
}

model Vote {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  type      voteType
  Review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.Uuid
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}
